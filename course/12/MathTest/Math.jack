// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powerOfTwo;
    /* Initializes the library. */
    function void init() {
        let powerOfTwo = Array.new(16); // This uses Memory.alloc so make 
                                      // sure to run Memory.init() before
        let powerOfTwo[0] = 1;
        let powerOfTwo[1] = 2;
        let powerOfTwo[2] = 4;
        let powerOfTwo[3] = 8;
        let powerOfTwo[4] = 16;
        let powerOfTwo[5] = 32;
        let powerOfTwo[6] = 64;
        let powerOfTwo[7] = 128;
        let powerOfTwo[8] = 256;
        let powerOfTwo[9] = 512;
        let powerOfTwo[10] = 1024;
        let powerOfTwo[11] = 2048;
        let powerOfTwo[12] = 4096;
        let powerOfTwo[13] = 8192;
        let powerOfTwo[14] = 16384;
        let powerOfTwo[15] = 16384 + 16384;
        return;
    }

    /* Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0) {
            return -x;
        }
        
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        
        var int i, sum, shiftedX;
        let sum = 0;
        let shiftedX = x;
        
        let i = 0;
        while (i<16) {
            if (Math.bitExtract(y,i) = 1) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i+1;
        }

        return sum;
    }

    /** Returns i'th bit of x */    
    function int bitExtract(int x, int i) {
        if ((x & powerOfTwo[i]) = 0) {
            return 0;
        }
        return 1;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q,r,sign,result;

        // if x and y have same sign => positive
        let sign = ((x < 0) = (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (x<y) {
            return 0;
        }

        let q = Math.divide(x,y+y);
        let r = 2*q*y;
        
        if ((x-r) < y) {
            let result = q+q;
        } else {
            let result = q+q+1;
        }

        if (sign) {
            return result;
        }
        return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        
        var int low, high, med;
        let high = 182;
        let low = 0;
        
        while (low < high) {
            let med = ((high-low)/2) + low;
            if ((med*med) = x) {
                return med;
            }
            
            if ((med*med) < x) {
                let low = med+1;
            } else {
                let high = med;
            }
        }
        
        return med;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a<b) {
            return a;
        }
        return b;
    }
}
