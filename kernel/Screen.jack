class Screen {

	static int SCREEN;
	static boolean color;
	static Array bitmask;

	// Update: Screen should directly access memory for faster updates.
	static Array memory;

    /** Initializes the Screen. */
    function void init() {
		let memory = 0;
    	let SCREEN = 16384;
    	let color = true;
    	do Screen.initBitmaskArray();
    	return;
    }
    
    function void initBitmaskArray() {
    	var int i, cur;
    	let bitmask = Array.new(16);
    	let cur = 1;
    	let i = 0;
    	while(i < 16) {
    		let bitmask[i] = cur;
    		let cur = cur + cur;
    		let i = i + 1;
    	}
    	return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
		var int i;

		let i=SCREEN;
		while (~(i=24575)) {
			let memory[i] = 0;
			let i=i+1;
		}

		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
    	let color = b;
    	return;
    }

	/** 
	* Efficiently calculates modulo 2^n of a given number
	*/
	function int moduloPower2(int num, int x) {
		return (num & (x-1));
	}

    /** Draws the (x,y) pixel. */
    function void drawPixel(int x, int y) {
    	var int loc, temp, pixel;
    	let loc = SCREEN + (y*32) + (x/16);
		let pixel = (x & (16-1)); // moduloPower2
    	let temp = memory[loc];
    	
		if (color) { let temp = (temp | bitmask[pixel]); }
		else { let temp = (temp & (~bitmask[pixel])); }
    	
		let memory[loc] = temp;
    	return;
    }

	/** Gets the (x,y) pixel. */
	function boolean getPixel(int x, int y) {
		var int loc, pixel, temp;
		let loc = SCREEN + (y*32) + (x/16);
		let pixel = (x & (16-1));
		let temp = memory[loc] & bitmask[pixel];
		return temp;
	}

    /** Draws a line from pixel (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int adyMinusbdx, a, b, dx, dy, x, y;
    	
		let adyMinusbdx = 0;
    	let dx = x2 - x1;
    	let dy = y2 - y1;
    	let x = Math.min(x1, x2);
    	let y = Math.min(y1, y2);
    	
		if (((dx < 0) & (dy > 0)) | ((dx > 0) & (dy < 0))) {
    		if (dy < 0) {
    			do Screen.drawDiagonalLine(x1, y1, dx, dy);
    		} else {
    			do Screen.drawDiagonalLine(x2, y2, -dx, -dy);
    		}
    		return;
    	} else {
    		let dx = Math.abs(dx);
    		let dy = Math.abs(dy);
    	}

    	if (dy = 0) {
    		do Screen.drawHorizontalLineOptimized(x, y, dx);
    		return;
    	}
    	
		if (dx = 0) {
    		do Screen.drawVerticalLine(x, y, dy);
    		return;
    	}
    	
		while ((~(a > dx)) & (~(b > dy))) {
    		do Screen.drawPixel(x + a, y + b);
    		if (adyMinusbdx < 0) {
    			let a = a + 1;
    			let adyMinusbdx = adyMinusbdx + dy;
    		} else {
    			let b = b + 1;
    			let adyMinusbdx = adyMinusbdx - dx;
    		}
    	}
    	return;
    }
    
    function void drawDiagonalLine(int x, int y, int dx, int dy) {
       	var int adyMinusbdx, a, b;
    	
		let adyMinusbdx = 0;
    	let a = 0;
    	let b = 0;
    	
		while ((~(a > dx)) & (~(b < dy))) {
    		do Screen.drawPixel(x + a, y + b);
    		if (adyMinusbdx < 0) {
    			let b = b - 1;
    			let adyMinusbdx = adyMinusbdx + dx;
    		} else {
    			let a = a + 1;
    			let adyMinusbdx = adyMinusbdx + dy;
    		}
    	}
    	return;    
    }
    
    function void drawVerticalLine(int x, int y, int dy) {
    	var int i;
    	let i = 0;
    	while (~(i > dy)) {
    		do Screen.drawPixel(x, y + i);
    		let i = i + 1;
    	}
    	return;
    }

    function void drawHorizontalLineOptimized(int x, int y, int dx) {
    	var int i, bulkedSize, address, bulkedStart;
    	if (dx < 16) {
    		do Screen.drawHorizontalLine(x, y, dx);
    		return;
    	}
    	
		let i = 0;   	
    	let bulkedStart = x - (x & (16-1)) + 16; // moduloPower2
    	let address = SCREEN + (y * 32) + (bulkedStart / 16);
    	let bulkedSize = (dx - (x & (16-1))) - 16; // moduloPower2
    	
		do Screen.drawHorizontalLine(x, y, (bulkedStart - x));
    	while (i < bulkedSize) {
    		let memory[address] = color;
			let address = address + 1;
    		let i = i + 16;
    	}
    	
		do Screen.drawHorizontalLine(x + bulkedSize, y, (dx - bulkedSize));
    	return;
    }
    
    function void drawHorizontalLine(int x, int y, int dx) {
    	
    	var int i,j;

		let i = 0;
		
    	while (~(i>dx)) {
   			do Screen.drawPixel(x+i, y);
   			let i = i+1;
    	}

    	return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    	var int i, dx, dy;
    	let dx = Math.abs(x2-x1);
    	let dy = Math.abs(y2-y1);
    	while (i < dy) {
    		do Screen.drawHorizontalLineOptimized(x1, y1+i, dx);
    		let i = i+1;
    	}
    	return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
    	var int dy, temp, rsqrt;
    	let dy = -r;
    	let rsqrt = r * r;
    	while (~(dy > r)) {
    		let temp = Math.sqrt(rsqrt - (dy * dy));
    		do Screen.drawHorizontalLineOptimized(cx - temp, cy + dy, temp * 2);
    		let dy = dy + 1;
    	}
	    return;
    }
}
